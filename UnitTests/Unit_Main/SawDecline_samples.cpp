#include "SawDecline_samples.h"
const sample_data SawDecline_samples[8] = {
	{
		(int16_t*)sample_0_SawDecline_SawDecline9375Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		11,	//Number of bits needed to hold length
		(2097152*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 92.4986056779086 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)1024-1) << (32 - 11),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)768-1) << (32 - 11),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)768-1) << (32 - 11)) - (((uint32_t)256-1) << (32 - 11)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_1_SawDecline_SawDecline1875Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		10,	//Number of bits needed to hold length
		(4194304*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 184.9972113558172 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)512-1) << (32 - 10),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)384-1) << (32 - 10),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)384-1) << (32 - 10)) - (((uint32_t)128-1) << (32 - 10)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_2_SawDecline_SawDecline375Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		9,	//Number of bits needed to hold length
		(8388608*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 369.9944227116344 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)256-1) << (32 - 9),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)192-1) << (32 - 9),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)192-1) << (32 - 9)) - (((uint32_t)64-1) << (32 - 9)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_3_SawDecline_SawDecline750Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		8,	//Number of bits needed to hold length
		(16777216*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 739.9888454232688 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)128-1) << (32 - 8),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)96-1) << (32 - 8),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)96-1) << (32 - 8)) - (((uint32_t)32-1) << (32 - 8)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_4_SawDecline_SawDecline1500Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		7,	//Number of bits needed to hold length
		(33554432*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 1479.9776908465376 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)64-1) << (32 - 7),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)48-1) << (32 - 7),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)48-1) << (32 - 7)) - (((uint32_t)16-1) << (32 - 7)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_5_SawDecline_SawDecline3000Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		7,	//Number of bits needed to hold length
		(33554432*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 2959.955381693075 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)64-1) << (32 - 7),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)56-1) << (32 - 7),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)56-1) << (32 - 7)) - (((uint32_t)8-1) << (32 - 7)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_6_SawDecline_SawDecline6000Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		7,	//Number of bits needed to hold length
		(33554432*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 5919.91076338615 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)64-1) << (32 - 7),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)52-1) << (32 - 7),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)52-1) << (32 - 7)) - (((uint32_t)12-1) << (32 - 7)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_7_SawDecline_SawDecline12000Hz,	//16-bit PCM encoded audio sample
		true,	//Whether or not to loop this sample
		6,	//Number of bits needed to hold length
		(67108864*1.0*(48000.0 / AUDIO_SAMPLE_RATE_EXACT)) / 11839.8215267723 + 0.5,	//((0x80000000 >> (index_bits - 1)) * cents_offset * sampling_rate / AUDIO_SAME_RATE_EXACT) / sample_freq + 0.5
		((uint32_t)48-1) << (32 - 6),	//(sample_length-1) << (32 - sample_length_bits)
		((uint32_t)42-1) << (32 - 6),	//(loop_end-1) << (32 - sample_length_bits) == LOOP_PHASE_END
		(((uint32_t)42-1) << (32 - 6)) - (((uint32_t)6-1) << (32 - 6)),	//LOOP_PHASE_END - (loop_start-1) << (32 - sample_length_bits) == LOOP_PHASE_END - LOOP_PHASE_START == LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * DECIBEL_SHIFT(-0/100.0)), //INITIAL_ATTENUATION_SCALAR
		uint32_t(95*SAMPLES_PER_MSEC/8.0+0.5),	//DELAY_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//ATTACK_COUNT
		uint32_t(100*SAMPLES_PER_MSEC/8.0+0.5),	//HOLD_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//DECAY_COUNT
		uint32_t(1000*SAMPLES_PER_MSEC/8.0+0.5),	//RELEASE_COUNT
		int32_t(0*UNITY_GAIN),	//SUSTAIN_MULT
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), 	// VIBRATO_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(100 * SAMPLES_PER_MSEC / (2 * LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5001/1000.0 * LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(CENTS_SHIFT(-0/1000.0) - 1.0)*4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - CENTS_SHIFT(0/1000.0))*4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (DECIBEL_SHIFT(-0.1) - 1.0)) *4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - DECIBEL_SHIFT(0.1))) *4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

const uint32_t sample_0_SawDecline_SawDecline9375Hz[512] = {
0xff40ffc0,0xfe3ffebf,0xfd3ffdbf,0xfc3ffcbd,0xfb3efbbc,0xfa3efabc,0xf93df9bb,0xf83cf8bc,
0xf73cf7bc,0xf63bf6ba,0xf53cf5bb,0xf43af4ba,0xf339f3b9,0xf23bf2ba,0xf138f1b9,0xf038f0b7,
0xef38efb7,0xee37eeb7,0xed37edb6,0xec36ecb6,0xeb35ebb5,0xea35eab6,0xe936e9b4,0xe834e8b3,
0xe735e7b3,0xe634e6b3,0xe534e5b2,0xe433e4b3,0xe331e3b1,0xe232e2b0,0xe132e1b1,0xe031e0b1,
0xdf2fdfaf,0xde2edeaf,0xdd2fddae,0xdc2fdcac,0xdb2fdbad,0xda2ddaae,0xd92dd9ac,0xd82bd8ab,
0xd72dd7ac,0xd62bd6ac,0xd52bd5aa,0xd42bd4ab,0xd32bd3aa,0xd228d2a8,0xd12ad1a9,0xd028d0a9,
0xcf28cfa7,0xce29cea7,0xcd27cda6,0xcc27cca5,0xcb26cba6,0xca26caa4,0xc925c9a3,0xc823c8a3,
0xc725c7a4,0xc625c6a3,0xc522c5a2,0xc421c4a1,0xc323c3a2,0xc222c2a0,0xc122c1a0,0xc020c0a1,
0xbf1fbfa0,0xbe20be9f,0xbd1ebd9d,0xbc1ebc9d,0xbb1ebb9d,0xba1fba9e,0xb91eb99d,0xb81bb89b,
0xb71cb79b,0xb61cb69a,0xb51bb59a,0xb41bb49a,0xb319b399,0xb219b298,0xb11ab198,0xb018b097,
0xaf19af98,0xae17ae95,0xad17ad95,0xac15ac96,0xab16ab96,0xaa16aa95,0xa913a994,0xa815a892,
0xa713a796,0xa613a694,0xa514a592,0xa413a491,0xa312a390,0xa212a291,0xa112a190,0xa010a08f,
0x9f0f9f90,0x9e119e90,0x9d109d8f,0x9c0f9c8f,0x9b0e9b8d,0x9a0e9a8e,0x990c998d,0x980d988c,
0x970c978c,0x960c968b,0x950b958b,0x940a948a,0x930b9388,0x920a9289,0x91099189,0x90099086,
0x8f088f86,0x8e078e86,0x8d078d85,0x8c078c85,0x8b068b85,0x8a068a85,0x89058984,0x88058883,
0x87058783,0x86038682,0x85048583,0x84008482,0x83018382,0x82028280,0x81018180,0x8000807f,
0x7f807fff,0x7e7f7efd,0x7d7f7dff,0x7c7e7cfd,0x7b7e7bfd,0x7a7f7afe,0x797c79fd,0x787c78fc,
0x777d77fb,0x767b76fa,0x757b75fa,0x747b74fb,0x737a73fb,0x727972f9,0x717a71f8,0x707870f7,
0x6f776ff7,0x6e786ef6,0x6d776df5,0x6c776cf5,0x6b776bf7,0x6a766af5,0x697669f6,0x687568f5,
0x677467f3,0x667466f4,0x657465f2,0x647264f3,0x637363f1,0x627262f2,0x617261f1,0x607160f0,
0x5f705fef,0x5e6f5eee,0x5d705dee,0x5c6e5ced,0x5b6f5bed,0x5a6d5aed,0x596e59eb,0x586d58ed,
0x576d57eb,0x566c56e9,0x556c55e9,0x546c54eb,0x536953ea,0x526a52ea,0x516951e8,0x506a50e7,
0x4f694fe9,0x4e674ee6,0x4d674de7,0x4c664ce5,0x4b664be5,0x4a674ae3,0x496649e4,0x486448e5,
0x476447e3,0x466446e2,0x456345e3,0x446244e2,0x436243e2,0x426242e1,0x416241e1,0x406140e0,
0x3f613fdf,0x3e5f3edf,0x3d5e3ddf,0x3c5d3cdf,0x3b5f3bde,0x3a5e3ade,0x395e39de,0x385d38dc,
0x375d37db,0x365c36dd,0x355a35d9,0x345a34d9,0x335a33db,0x325b32d9,0x315931d9,0x305830d7,
0x2f592fd7,0x2e582ed6,0x2d572dd7,0x2c572cd5,0x2b542bd5,0x2a562ad4,0x295729d4,0x285628d5,
0x275427d4,0x265426d1,0x255425d2,0x245324d2,0x235323d1,0x225222cf,0x215221d0,0x205120d0,
0x1f501fcf,0x1e501ece,0x1d4f1dcd,0x1c4f1ccd,0x1b4f1bcd,0x1a4e1acc,0x194d19cd,0x184c18cc,
0x174c17cd,0x164b16cc,0x154c15cb,0x144b14ca,0x134913c9,0x124b12c8,0x114811ca,0x104810c8,
0x0f480fc8,0x0e480ec6,0x0d470dc7,0x0c470cc5,0x0b480bc5,0x0a460ac5,0x094609c3,0x084608c5,
0x074507c3,0x064406c2,0x054205c4,0x044304c3,0x034203c3,0x024302c1,0x014101c0,0x004100c1,
0xff40ffc0,0xfe3ffebf,0xfd3ffdbf,0xfc3ffcbd,0xfb3efbbc,0xfa3efabc,0xf93df9bb,0xf83cf8bc,
0xf73cf7bc,0xf63bf6ba,0xf53cf5bb,0xf43af4ba,0xf339f3b9,0xf23bf2ba,0xf138f1b9,0xf038f0b7,
0xef38efb7,0xee37eeb7,0xed37edb6,0xec36ecb6,0xeb35ebb5,0xea35eab6,0xe936e9b4,0xe834e8b3,
0xe735e7b3,0xe634e6b3,0xe534e5b2,0xe433e4b3,0xe331e3b1,0xe232e2b0,0xe132e1b1,0xe031e0b1,
0xdf2fdfaf,0xde2edeaf,0xdd2fddae,0xdc2fdcac,0xdb2fdbad,0xda2ddaae,0xd92dd9ac,0xd82bd8ab,
0xd72dd7ac,0xd62bd6ac,0xd52bd5aa,0xd42bd4ab,0xd32bd3aa,0xd228d2a8,0xd12ad1a9,0xd028d0a9,
0xcf28cfa7,0xce29cea7,0xcd27cda6,0xcc27cca5,0xcb26cba6,0xca26caa4,0xc925c9a3,0xc823c8a3,
0xc725c7a4,0xc625c6a3,0xc522c5a2,0xc421c4a1,0xc323c3a2,0xc222c2a0,0xc122c1a0,0xc020c0a1,
0xbf1fbfa0,0xbe20be9f,0xbd1ebd9d,0xbc1ebc9d,0xbb1ebb9d,0xba1fba9e,0xb91eb99d,0xb81bb89b,
0xb71cb79b,0xb61cb69a,0xb51bb59a,0xb41bb49a,0xb319b399,0xb219b298,0xb11ab198,0xb018b097,
0xaf19af98,0xae17ae95,0xad17ad95,0xac15ac96,0xab16ab96,0xaa16aa95,0xa913a994,0xa815a892,
0xa713a796,0xa613a694,0xa514a592,0xa413a491,0xa312a390,0xa212a291,0xa112a190,0xa010a08f,
0x9f0f9f90,0x9e119e90,0x9d109d8f,0x9c0f9c8f,0x9b0e9b8d,0x9a0e9a8e,0x990c998d,0x980d988c,
0x970c978c,0x960c968b,0x950b958b,0x940a948a,0x930b9388,0x920a9289,0x91099189,0x90099086,
0x8f088f86,0x8e078e86,0x8d078d85,0x8c078c85,0x8b068b85,0x8a068a85,0x89058984,0x88058883,
0x87058783,0x86038682,0x85048583,0x84008482,0x83018382,0x82028280,0x81018180,0x8000807f,
0x7f807fff,0x7e7f7efd,0x7d7f7dff,0x7c7e7cfd,0x7b7e7bfd,0x7a7f7afe,0x797c79fd,0x787c78fc,
0x777d77fb,0x767b76fa,0x757b75fa,0x747b74fb,0x737a73fb,0x727972f9,0x717a71f8,0x707870f7,
0x6f776ff7,0x6e786ef6,0x6d776df5,0x6c776cf5,0x6b776bf7,0x6a766af5,0x697669f6,0x687568f5,
0x677467f3,0x667466f4,0x657465f2,0x647264f3,0x637363f1,0x627262f2,0x617261f1,0x607160f0,
0x5f705fef,0x5e6f5eee,0x5d705dee,0x5c6e5ced,0x5b6f5bed,0x5a6d5aed,0x596e59eb,0x586d58ed,
0x576d57eb,0x566c56e9,0x556c55e9,0x546c54eb,0x536953ea,0x526a52ea,0x516951e8,0x506a50e7,
0x4f694fe9,0x4e674ee6,0x4d674de7,0x4c664ce5,0x4b664be5,0x4a674ae3,0x496649e4,0x486448e5,
0x476447e3,0x466446e2,0x456345e3,0x446244e2,0x436243e2,0x426242e1,0x416241e1,0x406140e0,
0x3f613fdf,0x3e5f3edf,0x3d5e3ddf,0x3c5d3cdf,0x3b5f3bde,0x3a5e3ade,0x395e39de,0x385d38dc,
0x375d37db,0x365c36dd,0x355a35d9,0x345a34d9,0x335a33db,0x325b32d9,0x315931d9,0x305830d7,
0x2f592fd7,0x2e582ed6,0x2d572dd7,0x2c572cd5,0x2b542bd5,0x2a562ad4,0x295729d4,0x285628d5,
0x275427d4,0x265426d1,0x255425d2,0x245324d2,0x235323d1,0x225222cf,0x215221d0,0x205120d0,
0x1f501fcf,0x1e501ece,0x1d4f1dcd,0x1c4f1ccd,0x1b4f1bcd,0x1a4e1acc,0x194d19cd,0x184c18cc,
0x174c17cd,0x164b16cc,0x154c15cb,0x144b14ca,0x134913c9,0x124b12c8,0x114811ca,0x104810c8,
0x0f480fc8,0x0e480ec6,0x0d470dc7,0x0c470cc5,0x0b480bc5,0x0a460ac5,0x094609c3,0x084608c5,
0x074507c3,0x064406c2,0x054205c4,0x044304c3,0x034203c3,0x024302c1,0x014101c0,0x004100c1,

};

const uint32_t sample_1_SawDecline_SawDecline1875Hz[256] = {
0xfe7fff80,0xfc7efd7e,0xfa7cfb7d,0xf879f97b,0xf675f779,0xf475f575,0xf271f375,0xf070f173,
0xee6def6f,0xec6bed6d,0xea6aeb6b,0xe869e96a,0xe664e767,0xe463e565,0xe263e363,0xe061e162,
0xde5fdf5f,0xdc5cdd5c,0xda5adb5b,0xd858d959,0xd657d759,0xd456d555,0xd251d353,0xd04fd151,
0xce4ecf4e,0xcc4dcd4d,0xca4acb4c,0xc849c948,0xc646c748,0xc444c546,0xc241c342,0xc040c141,
0xbe3ebf40,0xbc3cbd3d,0xba3abb3c,0xb838b938,0xb637b736,0xb434b535,0xb232b333,0xb030b133,
0xae2eaf2f,0xac2dad2c,0xaa29ab2b,0xa826a929,0xa626a728,0xa424a524,0xa221a325,0xa01fa122,
0x9e1f9f1f,0x9c1c9d1e,0x9a1b9b1b,0x98189919,0x96179717,0x94149517,0x92139313,0x90109110,
0x8e0f8f10,0x8c0c8d0d,0x8a098b0c,0x8808890b,0x86068707,0x84048507,0x82028303,0x80018100,
0x7eff7fff,0x7cfd7dfe,0x7af97bfc,0x78f879fa,0x76f777f7,0x74f575f6,0x72f373f3,0x70f171f3,
0x6eed6ff0,0x6cec6dee,0x6aea6bec,0x68e869ea,0x66e767e7,0x64e665e6,0x62e363e3,0x60e161e2,
0x5edf5fe0,0x5cdd5dde,0x5ad95bdc,0x58d859d9,0x56d857d7,0x54d455d6,0x52d353d4,0x50d151d2,
0x4ece4fcf,0x4cce4dce,0x4acc4bcb,0x48c849c9,0x46c847c7,0x44c445c7,0x42c243c3,0x40c141c2,
0x3ebf3fbf,0x3cbc3dbe,0x3abb3bba,0x38b939ba,0x36b837b8,0x34b535b6,0x32b333b4,0x30b031b3,
0x2eaf2fb1,0x2cae2dad,0x2aac2bab,0x28a929a9,0x26a627a8,0x24a425a6,0x22a223a4,0x20a121a2,
0x1e9f1f9e,0x1c9d1d9d,0x1a9b1b9c,0x18991999,0x16981798,0x14941595,0x12911392,0x10921193,
0x0e8e0f90,0x0c8d0d8e,0x0a8a0b8c,0x0889098a,0x06870787,0x04850585,0x02810384,0x00800184,
0xfe7fff80,0xfc7efd7e,0xfa7cfb7d,0xf879f97b,0xf675f779,0xf475f575,0xf271f375,0xf070f173,
0xee6def6f,0xec6bed6d,0xea6aeb6b,0xe869e96a,0xe664e767,0xe463e565,0xe263e363,0xe061e162,
0xde5fdf5f,0xdc5cdd5c,0xda5adb5b,0xd858d959,0xd657d759,0xd456d555,0xd251d353,0xd04fd151,
0xce4ecf4e,0xcc4dcd4d,0xca4acb4c,0xc849c948,0xc646c748,0xc444c546,0xc241c342,0xc040c141,
0xbe3ebf40,0xbc3cbd3d,0xba3abb3c,0xb838b938,0xb637b736,0xb434b535,0xb232b333,0xb030b133,
0xae2eaf2f,0xac2dad2c,0xaa29ab2b,0xa826a929,0xa626a728,0xa424a524,0xa221a325,0xa01fa122,
0x9e1f9f1f,0x9c1c9d1e,0x9a1b9b1b,0x98189919,0x96179717,0x94149517,0x92139313,0x90109110,
0x8e0f8f10,0x8c0c8d0d,0x8a098b0c,0x8808890b,0x86068707,0x84048507,0x82028303,0x80018100,
0x7eff7fff,0x7cfd7dfe,0x7af97bfc,0x78f879fa,0x76f777f7,0x74f575f6,0x72f373f3,0x70f171f3,
0x6eed6ff0,0x6cec6dee,0x6aea6bec,0x68e869ea,0x66e767e7,0x64e665e6,0x62e363e3,0x60e161e2,
0x5edf5fe0,0x5cdd5dde,0x5ad95bdc,0x58d859d9,0x56d857d7,0x54d455d6,0x52d353d4,0x50d151d2,
0x4ece4fcf,0x4cce4dce,0x4acc4bcb,0x48c849c9,0x46c847c7,0x44c445c7,0x42c243c3,0x40c141c2,
0x3ebf3fbf,0x3cbc3dbe,0x3abb3bba,0x38b939ba,0x36b837b8,0x34b535b6,0x32b333b4,0x30b031b3,
0x2eaf2fb1,0x2cae2dad,0x2aac2bab,0x28a929a9,0x26a627a8,0x24a425a6,0x22a223a4,0x20a121a2,
0x1e9f1f9e,0x1c9d1d9d,0x1a9b1b9c,0x18991999,0x16981798,0x14941595,0x12911392,0x10921193,
0x0e8e0f90,0x0c8d0d8e,0x0a8a0b8c,0x0889098a,0x06870787,0x04850585,0x02810384,0x00800184,

};

const uint32_t sample_2_SawDecline_SawDecline375Hz[128] = {
0xfcf8fefe,0xf8f1faf5,0xf4eaf6ee,0xf0e1f2e4,0xecd9eedd,0xe8d1ead5,0xe4cae6cd,0xe0c2e2c6,
0xdcb9debd,0xd8b1dab6,0xd4a9d6af,0xd0a2d2a4,0xcc9ace9e,0xc890ca96,0xc489c68d,0xc081c285,
0xbc7abe7d,0xb872ba76,0xb46ab66e,0xb061b264,0xac59ae5e,0xa852aa56,0xa449a64c,0xa041a245,
0x9c379e3e,0x98319a37,0x9429962e,0x90219226,0x8c198e1c,0x88108a16,0x8409860d,0x80008206,
0x7dfb7fff,0x79f37bf7,0x75eb77ef,0x71e373e6,0x6ddb6fdf,0x69d46bd6,0x65cb67cf,0x61c263c7,
0x5dbb5fbf,0x59b35bb7,0x55ab57af,0x51a453a6,0x4d9b4f9e,0x49924b95,0x458b478f,0x41834387,
0x3d7b3f7e,0x39733b77,0x356b376e,0x31623368,0x2d5c2f5e,0x29512b57,0x254c274d,0x21412347,
0x1d3a1f3c,0x19321b36,0x152a172e,0x11231326,0x0d190f1f,0x09140b16,0x050a070f,0x01030307,
0xfcf8fefe,0xf8f1faf5,0xf4eaf6ee,0xf0e1f2e4,0xecd9eedd,0xe8d1ead5,0xe4cae6cd,0xe0c2e2c6,
0xdcb9debd,0xd8b1dab6,0xd4a9d6af,0xd0a2d2a4,0xcc9ace9e,0xc890ca96,0xc489c68d,0xc081c285,
0xbc7abe7d,0xb872ba76,0xb46ab66e,0xb061b264,0xac59ae5e,0xa852aa56,0xa449a64c,0xa041a245,
0x9c379e3e,0x98319a37,0x9429962e,0x90219226,0x8c198e1c,0x88108a16,0x8409860d,0x80008206,
0x7dfb7fff,0x79f37bf7,0x75eb77ef,0x71e373e6,0x6ddb6fdf,0x69d46bd6,0x65cb67cf,0x61c263c7,
0x5dbb5fbf,0x59b35bb7,0x55ab57af,0x51a453a6,0x4d9b4f9e,0x49924b95,0x458b478f,0x41834387,
0x3d7b3f7e,0x39733b77,0x356b376e,0x31623368,0x2d5c2f5e,0x29512b57,0x254c274d,0x21412347,
0x1d3a1f3c,0x19321b36,0x152a172e,0x11231326,0x0d190f1f,0x09140b16,0x050a070f,0x01030307,

};

const uint32_t sample_3_SawDecline_SawDecline750Hz[128] = {
0xf9e7fdf6,0xf1c7f5d6,0xe9a6edb7,0xe185e598,0xd966dd76,0xd146d555,0xc924cd36,0xc105c515,
0xb8e4bcf4,0xb0c2b4d3,0xa8a4acb5,0xa083a493,0x98639c74,0x90429452,0x88208c32,0x80028410,
0x7bee7fff,0x73ce77de,0x6bae6fbe,0x638e679d,0x5b6d5f7d,0x534e575d,0x4b2d4f3e,0x430c471c,
0x3aea3efc,0x32ca36dc,0x2aa92eb9,0x228a2699,0x1a691e79,0x12481659,0x0a290e39,0x02070618,
0xf9e7fdf6,0xf1c7f5d6,0xe9a6edb7,0xe185e598,0xd966dd76,0xd146d555,0xc924cd36,0xc105c515,
0xb8e4bcf4,0xb0c2b4d3,0xa8a4acb5,0xa083a493,0x98639c74,0x90429452,0x88208c32,0x80028410,
0x7bee7fff,0x73ce77de,0x6bae6fbe,0x638e679d,0x5b6d5f7d,0x534e575d,0x4b2d4f3e,0x430c471c,
0x3aea3efc,0x32ca36dc,0x2aa92eb9,0x228a2699,0x1a691e79,0x12481659,0x0a290e39,0x02070618,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

const uint32_t sample_4_SawDecline_SawDecline1500Hz[128] = {
0xf39efbdf,0xe319eb5b,0xd295dad7,0xc211ca51,0xb18eb9ce,0xa106a94a,0x908498c8,0x80008840,
0x77be7fff,0x67396f7c,0x56b55ef7,0x46324e74,0x35af3df0,0x25292d6d,0x14a61ce7,0x04210c65,
0xf39efbdf,0xe319eb5b,0xd295dad7,0xc211ca51,0xb18eb9ce,0xa106a94a,0x908498c8,0x80008840,
0x77be7fff,0x67396f7c,0x56b55ef7,0x46324e74,0x35af3df0,0x25292d6d,0x14a61ce7,0x04210c65,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

const uint32_t sample_5_SawDecline_SawDecline3000Hz[128] = {
0xe667f778,0xc445d556,0xa223b333,0x80009111,0x6eed7fff,0x4ccc5ddd,0x2aab3bbb,0x08891999,
0xe667f778,0xc445d556,0xa223b333,0x80009111,0x6eed7fff,0x4ccc5ddd,0x2aab3bbb,0x08891999,
0xe667f778,0xc445d556,0xa223b333,0x80009111,0x6eed7fff,0x4ccc5ddd,0x2aab3bbb,0x08891999,
0xe667f778,0xc445d556,0xa223b333,0x80009111,0x6eed7fff,0x4ccc5ddd,0x2aab3bbb,0x08891999,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

const uint32_t sample_6_SawDecline_SawDecline6000Hz[128] = {
0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,
0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,
0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,
0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,0xc924edb7,0x8000a493,0x5b6d7fff,0x124836db,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

const uint32_t sample_7_SawDecline_SawDecline12000Hz[128] = {
0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,
0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,
0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,0x8000d555,0x2aab7ffe,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,
};
